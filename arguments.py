import inspect
from dataclasses import dataclass, field


@dataclass
class LLMArguments:
    llm: str = field(
        default="gpt-3.5-turbo-0125", metadata={"help": "The Large Language Model to be accessed."}
    )
    temperature: float = field(
        default=1.0, metadata={"help": "The temperature of LLM."}
    )
    top_k: int = field(
        default=10, metadata={"help": "The top_k of LLM."}
    )
    top_p: float = field(
        default=0.7, metadata={"help": "The top_p of LLM."}
    )
    n: int = field(
        default=1, metadata={"help": "Number of text sequences returned by LLM in just one query."}
    )
    max_tokens: int = field(
        default=1024, metadata={"help": "Maximum tokens generated by LLM in one query."}
    )

    @classmethod
    def from_dict(cls, config: dict):
        return cls(**{
            k: v for k, v in config.items()
            if k in inspect.signature(cls).parameters
        })


@dataclass
class DataArguments:
    prompt_name: str = field(
        default="", metadata={"help": "The name of prompting strategy."}
    )
    prompt_template: str = field(
        default="", metadata={"help": "The prompt template that will be used in query."}
    )
    use_core_instruction: bool = field(
        default=False, metadata={"help": "Decide if use CoRe instruction."}
    )
    dataset_name: str = field(
        default="", metadata={"help": "Dataset name."}
    )
    dataset_filepath: str = field(
        default="", metadata={"help": "The path of dataset file."}
    )
    output_filepath: str = field(
        default="",
        metadata={"help": "The file path to save responses in."}
    )
    number_extraction_output_filepath: str = field(
        default="",
        metadata={"help": "The file path to save responses of number extraction in."}
    )

    @classmethod
    def from_dict(cls, config: dict):
        return cls(**{
            k: v for k, v in config.items()
            if k in inspect.signature(cls).parameters
        })


@dataclass
class RunningArguments:
    num_threads: int = field(
        default=1, metadata={"help": "Number of threads used while querying LLM. Defaults to 1."}
    )
    generate_log_file: bool = field(
        default=False, metadata={"help": "Determine if generates a log file or not."}
    )
    is_number_extraction: bool = field(
        default=False, metadata={"help": "This running is used for number extraction or not."}
    )

    @classmethod
    def from_dict(cls, config: dict):
        return cls(**{
            k: v for k, v in config.items()
            if k in inspect.signature(cls).parameters
        })


@dataclass
class EntireArguments(LLMArguments, DataArguments, RunningArguments):
    pass
